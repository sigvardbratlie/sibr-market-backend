options:
  logging: CLOUD_LOGGING_ONLY

steps:
# STEP 0: Check the commit message.
- name: 'gcr.io/cloud-builders/git' # <-- THIS IS THE FIX. Use the official git image.
  id: 'Check-commit-message'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    commit_message=$(git log -1 --pretty=%B "${COMMIT_SHA}")
    if [[ ! "$commit_message" =~ "gcloud build" ]]; then
      echo "Keyword 'gcloud build' is missing. Failing build."
      exit 1
    else
      echo "Keyword found. Proceeding with build."
    fi

## ---- STEG 1: Build the Docker images in parallel ----
#- name: 'gcr.io/cloud-builders/docker'
#  id: 'build-scraping'
#  args:
#    - 'build'
#    - '-t'
#    - 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/scraping:${COMMIT_SHA}'
#    - './scraping'

#- name: 'gcr.io/cloud-builders/docker'
#  id: 'build-geocoding'
#  args:
#    - 'build'
#    - '-t'
#    - 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/geocoding:${COMMIT_SHA}'
#    - './geocoding'


#- name: 'gcr.io/cloud-builders/docker'
#  id: 'build-modeling'
#  args:
#    - 'build'
#    - '-t'
#    - 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/modeling:${COMMIT_SHA}'
#    - './modeling'

## ---- STEP 2: Push to Artifact Registry ----
#- name: 'gcr.io/cloud-builders/docker'
#  id: 'push-scraping'
#  waitFor: ['build-scraping']
#  args: ['push', 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/scraping:${COMMIT_SHA}']

#- name: 'gcr.io/cloud-builders/docker'
#  id: 'push-geocoding'
#  waitFor: ['build-geocoding']
#  args: ['push', 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/geocoding:${COMMIT_SHA}']

#- name: 'gcr.io/cloud-builders/docker'
#  id: 'push-modeling'
#  waitFor: ['build-modeling']
#  args: ['push', 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/modeling:${COMMIT_SHA}']


## ---- STEG 3: Compile the pipeline ----
#- name: 'python:3.11'
#  id: 'compile-pipeline'
#  waitFor: ['push-scraping', 'push-geocoding', 'push-modeling']
#  entrypoint: 'bash'
#  args:
#  - '-c'
#  - |
#    sed -i "s|SCRAPING_IMAGE_PLACEHOLDER|europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/scraping:${COMMIT_SHA}|g" pipelines/pipeline.py
#    sed -i "s|GEOCODING_IMAGE_PLACEHOLDER|europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/geocoding:${COMMIT_SHA}|g" pipelines/pipeline.py
#    sed -i "s|MODELING_IMAGE_PLACEHOLDER|europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/modeling:${COMMIT_SHA}|g" pipelines/pipeline.py

#    # Nå, installer dependencies og kompiler filen som nå har de korrekte URI-ene
#    pip install -r pipelines/requirements.txt && \
#    python pipelines/pipeline.py

# ---- STEP 4: Submit and schedule the pipeline using Python SDK ----
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'submit-pipeline'
  #waitFor: ['compile-pipeline']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Installer Python dependencies (pip er vanligvis forhåndsinstallert)
      apt-get update && apt-get install -y python3-venv

      # 1. Opprett og aktiver et virtuelt miljø
      python3 -m venv venv
      
      # 2. Installer pakker INNE i det virtuelle miljøet
      ./venv/bin/pip install -r pipelines/requirements.txt

      # Lag Python-skriptet
      cat <<EOF > submit_pipeline.py
      import google.cloud.aiplatform as aiplatform

      aiplatform.init(project='sibr-market', location='europe-west1')

      # Submit the PipelineJob
      job = aiplatform.PipelineJob(
          display_name='sibr-market-scheduled-run',
          template_path='gs://sibr-market/sibr_market_pipeline.json',
          pipeline_root='gs://sibr-market'
      )
      job.submit()

      # Create a schedule for recurring runs (adjust cron as needed: '0 2 */3 * *' = every 3 days at 2:00 AM)
      try:
          schedule = aiplatform.PipelineJobSchedule.create(
              pipeline_job=job,
              display_name='sibr-market-schedule',
              cron='0 2 */3 * *', # Kjører kl 02:00 hver tredje dag
              time_zone='Europe/Oslo'
          )
          print("Successfully created a new schedule.")
      except Exception as e:
          # This will fail if a schedule with the same display_name already exists.
          # You might want to add logic to update the existing schedule instead.
          print(f"Could not create schedule, it might already exist: {e}")

      EOF

      # 3. Kjør skriptet med Python fra det virtuelle miljøet
      ./venv/bin/python submit_pipeline.py

images:
- 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/scraping:${COMMIT_SHA}'
- 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/geocoding:${COMMIT_SHA}'
- 'europe-west1-docker.pkg.dev/sibr-market/sibr-market-repo/modeling:${COMMIT_SHA}'